{"version":3,"sources":["reactModules/Header.js","reactModules/Edit.js","modules/BookClass.js","modules/Storage.js","reactModules/Delete.js","reactModules/CheckBook.js","reactModules/Book.js","reactModules/Phantom.js","modules/PhantomCount.js","reactModules/Card.js","reactModules/Cancel.js","reactModules/CheckEdit.js","reactModules/CheckNew.js","reactModules/Submit.js","reactModules/Modal.js","reactModules/Footer.js","reactModules/App.js","modules/Controller.js","index.js"],"names":["Header","props","className","id","onClick","changeModal","newBook","Edit","data-bookid","bookID","bookClass","title","author","pages","year","read","desc","cover","this","saveToStorage","myLibrary","localStorage","setItem","JSON","stringify","console","log","Delete","toggleState","splice","window","location","reload","CheckBook","data-check","type","defaultChecked","Book","style","backgroundImage","Phantom","GetNumPhantoms","containerWidth","document","querySelector","offsetWidth","e","innerWidth","numElements","elementWidth","margin","elementsPerRow","Math","floor","getNumPhantomElements","length","Card","CreateUUID","replace","c","crypto","getRandomValues","Uint8Array","toString","bookShelf","pageCount","book","parseInt","publicationYear","map","push","key","createBookshelf","phantoms","i","numGhosts","addPhantomElements","Cancel","value","CheckEdit","event","checkBox","target","checked","removeAttribute","setAttribute","Submit","bookInput","getElementsByClassName","dataset","bookid","getElementById","undefined","input","modalContent","modalCheckbox","clearModal","Modal","fillModal","chooseCheckbox","modalType","CheckNew","componentDidMount","addEventListener","handleOutsideClick","handleKeydown","removeEventListener","placeholder","required","min","React","Component","Footer","href","confirm","clear","App","currentBook","setState","createModal","state","modal","node","childNodes","handleResize","toggle","someState","ref","getItem","parse","sampleBooks","samples","jsonEntry","loadData","ReactDOM","render","Controller"],"mappings":"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","file":"static/js/main.6676d6d1.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header (props) {\n  return (\n    <div className=\"header\">\n      <div className=\"header-title\">My Library</div>\n      <button id=\"add-btn\"\n              onClick={() => {props.changeModal('newBook', props.newBook)}}>\n        New Book\n      </button>\n    </div>\n  )\n}\n\nexport default Header","import React from 'react'\n\n// Edit book from library when \"Edit\" button is clicked\nfunction Edit (props) {\n  return (\n    <button className=\"btn\"\n            data-bookid={props.bookID}\n            onClick={() => {props.changeModal('editBook', props.bookID)}}\n            id={`edit-btn-${props.bookID}`}\n    >Edit\n    </button>\n  )\n}\n\nexport default Edit","// Object constructor and function declarations for book prototype\nclass bookClass {\n  constructor (title, author, pages, year, read, desc, cover) {\n    this.title = title\n    this.author = author\n    this.pages = pages\n    this.year = year\n    this.read = read // Bool. Has book been finished\n    this.desc = desc\n    this.cover = cover // URL to cover image\n  }\n}\n\nexport { bookClass }","import samples from '../samples'\nimport { bookClass } from './BookClass'\n\n// ---------- Methods for handling data manipulation, add, edit, delete and read buttons\n\n// Add book to library array\nfunction addBookToLibrary (book, myLibrary) {\n  myLibrary.push(book)\n  saveToStorage(myLibrary)\n}\n\n// Load books from localStorage or add sample books to the library\nconst loadData = () => {\n  if (localStorage.getItem('my-local-library')) {\n    console.log('Loading library from localStorage')\n    return JSON.parse(localStorage.getItem('my-local-library'))\n  } else {\n    console.log('Loading sample books')\n    let sampleBooks = []\n    samples.map(samplesMap)\n\n    function samplesMap (jsonEntry) {\n      sampleBooks.push(new bookClass(jsonEntry.title, jsonEntry.author,\n        jsonEntry.pages, jsonEntry.year, jsonEntry.read,\n        jsonEntry.desc, jsonEntry.cover))\n    }\n\n    return sampleBooks\n  }\n}\n\n// Save myLibrary from memory to localStorage\nfunction saveToStorage (myLibrary) {\n  localStorage.setItem('my-local-library', JSON.stringify(myLibrary))\n  console.log('Data saved to storage ->')\n  console.log(myLibrary)\n}\n\nexport {\n  addBookToLibrary,\n  loadData,\n  saveToStorage,\n}\n","import React from 'react'\nimport { saveToStorage } from '../modules/Storage'\n\n// Delete book from main view and myLibrary\nfunction Delete (props) {\n  function deleteBook (bookID, myLibrary, toggleState) {\n    // if (window.confirm(`Delete book \"${myLibrary[bookID].title}\"?`))\n    myLibrary.splice(bookID, 1)\n    toggleState()\n\n    saveToStorage(props.myLibrary)\n    window.location.reload()\n  }\n\n  return (\n    <button className=\"btn\"\n            data-bookid={props.bookID}\n            onClick={() => deleteBook(\n              props.bookID,\n              props.myLibrary,\n              props.toggleState,\n            )}>Delete</button>\n  )\n}\n\nexport default Delete\n","import React from 'react'\nimport { saveToStorage } from '../modules/Storage'\n\nfunction CheckBook (props) {\n  const bookID = props.bookID\n  const myLibrary = props.myLibrary\n  const read = myLibrary[bookID].read\n\n  // Toggle checkbox (circle) for book displayed\n  const toggleCheckbox = () => {\n    if (myLibrary[bookID].read) {\n      myLibrary[bookID].read = false\n    } else {\n      myLibrary[bookID].read = true\n    }\n    saveToStorage(myLibrary)\n  }\n\n  return (\n    <label className=\"checkbox\" data-check={'book'}>\n      <input type=\"checkbox\"\n             defaultChecked={read}\n             onClick={toggleCheckbox}\n      />\n      <span className=\"checkmark\"></span>\n    </label>\n  )\n}\n\nexport default CheckBook\n","import React from 'react'\nimport Edit from './Edit'\nimport Delete from './Delete'\nimport CheckBook from './CheckBook'\n\n// Display books to the page\nfunction Book (props) {\n  return (\n    <article className=\"card\">\n      <div className=\"book-cover\"\n           style={{ backgroundImage: `url(${props.cover})` }}></div>\n      <div className=\"overlay\">\n        <h2 className=\"title\">{props.title}</h2>\n        <h3 className=\"author\">{props.author}</h3>\n        <p className=\"description\">{props.desc}</p>\n        <p className=\"book-stats\">{props.pages}{props.year}</p>\n        <div className=\"buttons\">\n          <Edit bookID={props.bookID} changeModal={props.changeModal}/>\n          <Delete bookID={props.bookID} myLibrary={props.myLibrary}\n                  toggleState={props.toggleState}/>\n          <CheckBook bookID={props.bookID} myLibrary={props.myLibrary}/>\n        </div>\n      </div>\n    </article>\n  )\n}\n\nexport default Book\n","import React from 'react'\n\nfunction Phantom () {\n  return (\n    <article className=\"card phantom\">\n    </article>\n  )\n}\n\nexport default Phantom","class GetNumPhantoms {\n  /**\n   * @param {Integer} numElements The number of elements you're displaying.\n   * @param {Number} element Width Width, in pixels, of each element.\n   * @param {Number} margin Width, in pixels. Your minimum target margin between items. 2x the margin on each individual item.\n   * @param {Number} containerWidth Width, in pixels, of the containing element.\n   */\n  static numGhosts (myLibrary) {\n    let containerWidth = 0\n    const getNumPhantomElements = ({ numElements, elementWidth, margin, containerWidth }) => {\n      const elementsPerRow = Math.floor(\n        containerWidth / (elementWidth + margin))\n      const elementsInLastRow = numElements % elementsPerRow\n      const numPhantomElements = elementsPerRow - elementsInLastRow\n      return numPhantomElements\n    }\n    // Get root width for containerWidth before .card-catalogue is shown\n    try {\n      containerWidth = document.querySelector('.card-catalogue').offsetWidth\n    } catch (e) {\n      // Get body width and cut by 0.953 to get approximate .card-catalogue width\n      containerWidth = window.innerWidth * 0.953\n    }\n    // Width of each Book in pixels\n    const elementWidth = 270\n    const numPhantomElements = getNumPhantomElements({\n      numElements: myLibrary.length,\n      elementWidth,\n      margin: 5,\n      containerWidth,\n    })\n    return numPhantomElements\n  }\n}\n\nexport default GetNumPhantoms","/* eslint-disable no-mixed-operators */\nimport React from 'react'\nimport Book from './Book'\nimport Phantom from './Phantom'\nimport GetNumPhantoms from '../modules/PhantomCount'\n\n// Create multiple \"<Book/>\" components based on how many there are from data\nfunction Card (props) {\n\n  // Creating GUID/UUID in Javascript using ES6 Crypto API\n  const CreateUUID = () => {\n    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g,\n      c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c /\n        4).toString(16))\n  }\n\n  // Add hidden books to last row to \"align\" books to the left\n  const addPhantomElements = () => {\n    const phantoms = []\n    for (let i = 0; i < GetNumPhantoms.numGhosts(props.myLibrary); i++) {\n      phantoms.push(<Phantom key={CreateUUID()}/>)\n    }\n    return phantoms\n  }\n\n  const createBookshelf = (myLibrary, changeModal, toggleState) => {\n    const bookShelf = []\n\n    // Return formatted number of pages in book\n    function pageCount (book) {\n      let pages\n      parseInt(book.pages, 10) > 1\n        ? pages = parseInt(book.pages, 10) + ' pages'\n        : pages = ' '\n      return pages\n    }\n\n    // Return formatted year of publication for book\n    function publicationYear (book) {\n      let year\n      (parseInt(book.pages, 10) > 1 &&\n        parseInt(book.year, 10) >= 0) ? year = ', '\n        + parseInt(book.year, 10) : year = parseInt(book.year, 10)\n      return year\n    }\n\n    // Create Book component\n    myLibrary.map(myLibraryMap)\n\n    function myLibraryMap (book, bookID, myLibrary) {\n      bookShelf.push(<Book myLibrary={myLibrary}\n                           bookID={bookID}\n                           title={book.title}\n                           author={book.author}\n                           pages={pageCount(book)}\n                           year={publicationYear(book)}\n                           read={book.read}\n                           desc={book.desc}\n                           cover={book.cover}\n                           changeModal={changeModal}\n                           toggleState={toggleState}\n                           key={CreateUUID()}/>)\n    }\n\n    return bookShelf\n  }\n\n  return (\n    <div className=\"card-catalogue\">\n      {createBookshelf(props.myLibrary, props.changeModal,\n        props.toggleState)}\n      {addPhantomElements()}\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\n\nfunction Cancel ({ changeModal }) {\n  return (\n    <input type=\"button\" className=\"btn\" id=\"m-cancel\" value=\"Cancel\"\n           onClick={changeModal}/>\n  )\n}\n\nexport default Cancel\n","import React from 'react'\n\nfunction CheckEdit (props) {\n  const read = props.myLibrary[props.bookID].read\n  // Toggle checkbox (circle) for edit current book modal\n  const toggleCheckbox = (event) => {\n    const checkBox = event.target\n    // Update modal checkbox with correct read status\n    checkBox.checked ? checkBox.checked = true : checkBox.checked = false\n  }\n\n  return (\n    <label className=\"col2 checkbox\" id=\"m-read\" data-check={'edit'}>\n      <input type=\"checkbox\" id=\"m-checkbox\"\n             data-bookid={props.bookID}\n             defaultChecked={read}\n             onClick={toggleCheckbox}\n      />\n      <span className=\"checkmark\" id=\"m-checkmark\"></span>\n    </label>\n  )\n}\n\nexport default CheckEdit\n","import React from 'react'\n\nfunction CheckEdit (props) {\n  // Toggle checkbox (circle) for adding new book\n  const toggleCheckbox = (event) => {\n    const checkBox = event.target\n    if (checkBox.checked) {\n      checkBox.value = false\n      checkBox.removeAttribute('checked')\n    } else {\n      checkBox.value = true\n      checkBox.setAttribute('checked', 'checked')\n    }\n  }\n\n  return (\n    <label className=\"col2 checkbox\" id=\"m-read\" data-check={'new'}>\n      <input type=\"checkbox\" id=\"m-checkbox\"\n             data-bookid={props.bookID}\n             defaultChecked={false}\n             onClick={toggleCheckbox}\n      />\n      <span className=\"checkmark\" id=\"m-checkmark\"></span>\n    </label>\n  )\n}\n\nexport default CheckEdit\n","import React from 'react'\nimport { addBookToLibrary, saveToStorage } from '../modules/Storage'\nimport { bookClass } from '../modules/BookClass'\n\nfunction Submit (props) {\n  const bookInput = {\n    title: '',\n    author: '',\n    pages: -1,\n    year: -1,\n    read: false,\n    desc: '',\n    cover: '',\n  }\n\n  // Remove values form modal making it all empty\n  function clearModal () {\n    let inputIDs = [\n      'm-title',\n      'm-author',\n      'm-description',\n      'm-pages',\n      'm-year',\n      'm-image-url']\n    for (const input of inputIDs) {\n      document.getElementById(input).value = ''\n    }\n    const modalContent = document.querySelector('.modal-content')\n    const modalCheckbox = document.querySelector('#m-checkbox')\n    modalContent.id = ''\n    modalCheckbox.checked = false\n    modalCheckbox.value = false\n    modalCheckbox.removeAttribute('checked')\n  }\n\n  // Extract modal input and save to local storage\n  function submitBook (event) {\n    let bookID = document.getElementsByClassName(\n      'modal-content')[0].dataset.bookid\n    bookInput.title = document.getElementById('m-title').value\n    if (bookInput.title === '') {\n      console.log('Please enter a book title.')\n    } else {\n      bookInput.author = document.getElementById('m-author').value\n      bookInput.pages = document.getElementById('m-pages').value\n      bookInput.year = document.getElementById('m-year').value\n      bookInput.read = document.getElementById('m-checkbox').checked\n      bookInput.desc = document.getElementById('m-description').value\n      bookInput.cover = document.getElementById('m-image-url').value\n      // Add new book to end of library or edit current book if bookID exist\n      if (bookID === undefined || bookID === 'undefined') {\n        addBookToLibrary(new bookClass(bookInput.title, bookInput.author,\n          bookInput.pages, bookInput.year, bookInput.read, bookInput.desc,\n          bookInput.cover), props.myLibrary)\n      } else {\n        props.myLibrary[bookID] = new bookClass(bookInput.title,\n          bookInput.author,\n          bookInput.pages, bookInput.year, bookInput.read, bookInput.desc,\n          bookInput.cover)\n        bookID = undefined\n      }\n      saveToStorage(props.myLibrary)\n      clearModal()\n      // Remove modal by passing nothing to changeModal method\n      props.changeModal()\n      window.location.reload()\n    }\n  }\n\n  return (\n    <input type=\"submit\" className=\"btn\" id=\"m-submit\" onClick={submitBook}/>)\n}\n\nexport default Submit\n","import React from 'react'\nimport Cancel from './Cancel'\nimport CheckEdit from './CheckEdit'\nimport CheckNew from './CheckNew'\nimport Submit from './Submit'\n\nclass Modal extends React.Component {\n  // Fill modal input fields with book data when editing current book\n  fillModal = (bookID, myLibrary) => {\n    const book = myLibrary[bookID]\n    document.querySelector('.modal-content').dataset.bookid = bookID\n    document.getElementById('m-checkbox').dataset.bookid = bookID\n    document.getElementById('m-title').value = book.title\n    document.getElementById('m-author').value = book.author\n    document.getElementById('m-description').value = book.desc\n    document.getElementById('m-pages').value = book.pages\n    document.getElementById('m-year').value = book.year\n    document.getElementById('m-image-url').value = book.cover\n  }\n\n  chooseCheckbox = () => {\n    const modalType = this.props.modalType\n    if (modalType === 'editBook') {\n      return (<CheckEdit bookID={this.props.bookID}\n                         myLibrary={this.props.myLibrary}/>)\n    } else if (modalType === 'newBook') {\n      return (<CheckNew myLibrary={this.props.myLibrary}/>)\n    }\n  }\n\n  componentDidMount = () => {\n    if (this.props.modalType === 'editBook')\n      this.fillModal(this.props.bookID, this.props.myLibrary)\n    // Needed to remove modal when clicked outside of it\n    document.addEventListener('click', this.props.handleOutsideClick, false)\n    document.addEventListener('keydown', this.props.handleKeydown, false)\n  }\n\n  componentWillUnmount () {\n    document.removeEventListener('click', this.props.handleOutsideClick, false)\n    document.removeEventListener('keydown', this.props.handleKeydown, false)\n  }\n\n  render () {\n    return (\n      <div className=\"modal show-modal\">\n        <form>\n          <div className=\"modal-content\">\n            <div className=\"col1\">Title:</div>\n            <div className=\"col2\">\n              <input type=\"text\" id=\"m-title\" placeholder=\"Title [Required]\"\n                     required/>\n            </div>\n            <div className=\"col1\">Author:</div>\n            <div className=\"col2\">\n              <input type=\"text\" id=\"m-author\" placeholder=\"Author\"/></div>\n            <div className=\"col1\">Description:</div>\n            <div className=\"col2\">\n                <textarea id=\"m-description\"\n                          placeholder=\"Description\"></textarea>\n            </div>\n            <div className=\"col1\">Pages:</div>\n            <div className=\"col2\">\n              <input type=\"number\" id=\"m-pages\" placeholder=\"Pages\" min=\"0\"/>\n            </div>\n            <div className=\"col1\">Year:</div>\n            <div className=\"col2\">\n              <input type=\"number\" id=\"m-year\" placeholder=\"Year\" min=\"0\"/>\n            </div>\n            <div className=\"col1\">Read:</div>\n            {this.chooseCheckbox()}\n            <div className=\"col1\">Image URL:</div>\n            <div className=\"col2\">\n              <input type=\"text\" id=\"m-image-url\" placeholder=\"http://\"/>\n            </div>\n            <div className=\"modal-buttons\">\n              <Submit changeModal={this.props.changeModal}\n                      myLibrary={this.props.myLibrary}/>\n              <Cancel changeModal={this.props.changeModal}/>\n            </div>\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Modal\n","import React from 'react'\nimport { saveToStorage } from '../modules/Storage'\n\nfunction Footer ({ myLibrary }) {\n  // Remove all books from library\n  const removeAllBooks = () => {\n    if (window.confirm('Erase all books?')) {\n      myLibrary.splice(0)\n      saveToStorage(myLibrary)\n      window.location.reload()\n    }\n  }\n\n  const resetToSample = () => {\n    if (window.confirm('Reset to sample data?')) {\n      localStorage.clear()\n      window.location.reload()\n    }\n  }\n\n  return (\n    <footer>This app was made for a <a\n      href=\"https://www.theodinproject.com/courses/javascript/lessons/library\">\n      React JS coding assignment</a> at The Oden Project. View the <a\n      href=\"https://github.com/winplam/library\">source code</a> on GitHub.<br/>\n      <button className={'footerButtons'} onClick={removeAllBooks}>\n        Remove all books\n      </button>\n      including sample. |\n      <button className={'footerButtons'} onClick={resetToSample}>\n        Reset to sample</button>data.\n    </footer>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport Header from './Header'\nimport Card from './Card'\nimport Modal from './Modal'\nimport Footer from './Footer'\nimport '../style.css'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { modalType: 'editBook' }\n    this.state = { currentBook: 'editBook' }\n    this.state = { someState: false }\n  }\n\n  // State and methods for showing and hiding the New Book modal\n  changeModal = (modalType, currentBook) => {\n    this.setState({ modalType: modalType })\n    this.setState({ currentBook: currentBook })\n  }\n\n  // Create modal when \"shown\" and empty out (remove) by default\n  createModal = (myLibrary) => {\n    const modalType = this.state.modalType\n    let modal = ''\n    // Create Modal component\n    if (modalType === 'editBook' || modalType === 'newBook') {\n      modal = (<Modal bookID={this.state.currentBook}\n                      handleKeydown={this.handleKeydown}\n                      handleOutsideClick={this.handleOutsideClick}\n                      myLibrary={myLibrary}\n                      modalType={modalType}\n                      changeModal={this.changeModal}/>)\n    }\n    return modal\n  }\n\n  // Close (remove) modal when Escape key is pressed\n  handleKeydown = (event) => {\n    if (event.key === 'Escape') this.changeModal('')\n  }\n\n  // Close (remove) modal when clicked outside of it\n  handleOutsideClick = (event) => {\n    if (this.node.childNodes[2] === event.target) {\n      this.changeModal('')\n    }\n  }\n\n  // Refresh state when window re-sizes to update number of phantom elements\n  handleResize = () => {\n    this.toggleState()\n  }\n\n  // Call handleResize to refresh state when window re-sizes to update number of phantom elements\n  componentDidMount () {\n    window.addEventListener('resize', this.handleResize)\n  }\n\n  // Toggle someState between true/false to force re-render of books (Used by Delete button)\n  toggleState = () => {\n    const toggle = this.state.someState ? false : true\n    this.setState({ someState: toggle })\n  }\n\n  render () {\n    return (\n      <div ref={node => this.node = node}>\n        <Header changeModal={this.changeModal}\n                newBook={this.props.myLibrary.length}/>\n        <Card myLibrary={this.props.myLibrary}\n              changeModal={this.changeModal}\n              toggleState={this.toggleState}/>\n        {this.createModal(this.props.myLibrary)}\n        <Footer myLibrary={this.props.myLibrary}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from '../reactModules/App'\nimport { loadData } from './Storage'\n\nconst openLibrary = () => {\n  const myLibrary = loadData()\n\n  ReactDOM.render(<App myLibrary={myLibrary}/>, document.getElementById('root'))\n}\n\nexport { openLibrary }\n","import * as Controller from './modules/Controller'\n\n// Initialize the library\nController.openLibrary()\n"],"sourceRoot":""}